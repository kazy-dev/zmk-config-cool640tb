// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        double_quotation {
            bindings = <&kp CAPS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        eq {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <8 9>;
            layers = <2>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W      &kp E         &kp R        &kp T         &kp Y      &kp U            &kp I            &kp O       &kp P
&kp A         &kp S      &kp D         &kp F        &kp G         &kp H      &kp J            &kp K            &kp L       &kp ENTER
&kp Z         &kp X      &kp C         &kp V        &kp B         &kp N      &kp M            &kp COMMA        &kp PERIOD  &kp SLASH
&kp LEFT_ALT  &kp LCTRL  &kp LEFT_GUI  &lt 1 LANG1  &lt 3 ESCAPE  &kp SPACE  &lt 2 BACKSPACE  &kp RIGHT_SHIFT  &mo 4       &lt 3 ESCAPE
            >;
        };

        NUMBER_LAYER {
            bindings = <
&kp N1          &kp N2        &kp N3            &kp N4         &kp N5  &kp N6          &kp N7          &kp N8          &kp N9           &kp N0
&kp LCTRL       &kp LC(LEFT)  &kp LC(UP_ARROW)  &kp LC(RIGHT)  &none   &msc SCRL_DOWN  &mkp MB1        &mmv MOVE_UP    &mmv MOVE_RIGHT  &kp SEMICOLON
&kp LEFT_SHIFT  &none         &none             &none          &none   &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mkp MB2         &kp GRAVE
&trans          &trans        &trans            &trans         &trans  &trans          &trans          &trans          &trans           &trans
            >;
        };

        SYMBOL_LAYER {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET      &kp AMPERSAND  &kp ASTERISK          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LCTRL        &kp F5       &kp F6    &kp F7      &kp F8       &kp MINUS      &kp EQUAL      &kp LEFT_BRACKET      &kp RIGHT_BRACKET     &kp SQT
&kp LEFT_SHIFT   &kp F9       &kp F10   &kp F11     &kp F12      &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACE)   &kp BACKSLASH
&trans           &trans       &trans    &trans      &trans       &trans         &trans         &trans                &trans                &trans
            >;
        };

        ARROW_LAYER {
            bindings = <
&kp TAB         &kp C_MUTE  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN     &none   &none   &none           &kp UP_ARROW    &kp RIGHT_ARROW  &none
&kp LCTRL       &none       &none            &kp LS(LG(NUMBER_6))  &none   &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &none            &none
&kp LEFT_SHIFT  &none       &none            &kp LS(LG(NUMBER_4))  &none   &none   &kp F1          &kp F2          &kp F3           &kp F4
&trans          &trans      &trans           &trans                &trans  &trans  &trans          &trans          &trans           &trans
            >;
        };

        BLE_LAYER {
            bindings = <
&bt BT_CLR_ALL  &bt BT_CLR    &none         &none         &none         &none   &none   &none   &none   &none
&none           &none         &none         &none         &none         &none   &none   &none   &none   &none
&bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none   &none   &none   &none   &none
&trans          &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans
            >;
        };

        MOUSE_LAYER {
            bindings = <
&kp TAB         &mkp MB4            &mkp MB1          &mkp MB2             &mkp MB5  &none   &none   &none   &none   &none
&kp LCTRL       &kp LC(LEFT_ARROW)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &none     &none   &none   &none   &none   &none
&kp LEFT_SHIFT  &none               &none             &none                &none     &none   &none   &none   &none   &none
&trans          &trans              &trans            &trans               &mo 6     &trans  &trans  &trans  &trans  &to 0
            >;
        };

        SCROLL_LAYER {
            bindings = <
&kp TAB         &none   &none   &none   &none   &none   &none   &none   &none   &none
&kp LCTRL       &none   &none   &none   &none   &none   &none   &none   &none   &none
&kp LEFT_SHIFT  &none   &none   &none   &none   &none   &none   &none   &none   &none
&trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
